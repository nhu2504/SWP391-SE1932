import dal.DBContext;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.MultipartConfig;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import jakarta.servlet.http.Part;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

//VƒÉn Th·ªã NH∆∞ - HE181329

@WebServlet("/UpdateCenterInfoServlet")
@MultipartConfig(
        fileSizeThreshold = 1024 * 1024,  // 1MB
        maxFileSize = 5 * 1024 * 1024,    // 5MB
        maxRequestSize = 10 * 1024 * 1024 // 10MB
)
public class UpdateCenterInfoServlet extends HttpServlet {

    private static final String[] VALID_FIELDS = {"centerName", "address", "email", "phone"};
    private static final Logger LOGGER = Logger.getLogger(UpdateCenterInfoServlet.class.getName());

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        LOGGER.info("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω POST request...");

        // Ki·ªÉm tra ph√¢n quy·ªÅn
        HttpSession session = request.getSession(false);
        if (session == null || !"admin".equals(session.getAttribute("userRole"))) {
            LOGGER.warning("‚ö†Ô∏è Kh√¥ng c√≥ quy·ªÅn admin.");
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Ch·ªâ admin c√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin.");
            return;
        }

        // Ki·ªÉm tra content type
        String contentType = request.getContentType();
        boolean isMultipart = contentType != null && contentType.toLowerCase().contains("multipart/form-data");
        String fieldName = request.getParameter("fieldName");

        try (Connection conn = new DBContext().connection) { // Gi·∫£ s·ª≠ DBContext c√≥ getConnection()
            if (conn == null) {
                LOGGER.severe("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.");
                throw new SQLException("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu.");
            }

            if (isMultipart) {
                // X·ª≠ l√Ω upload file logo
                try {
                    Part filePart = request.getPart("logoFile");
                    if (filePart == null) {
                        LOGGER.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y field 'logoFile' trong request.");
                        response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Kh√¥ng t√¨m th·∫•y file logo.");
                        return;
                    }
                    if (filePart.getSize() == 0) {
                        LOGGER.warning("‚ö†Ô∏è File logo r·ªóng.");
                        response.sendError(HttpServletResponse.SC_BAD_REQUEST, "File logo kh√¥ng h·ª£p l·ªá.");
                        return;
                    }

                    String originalFileName = filePart.getSubmittedFileName();
                    if (originalFileName == null || originalFileName.isEmpty()) {
                        LOGGER.warning("‚ö†Ô∏è File name kh√¥ng h·ª£p l·ªá.");
                        response.sendError(HttpServletResponse.SC_BAD_REQUEST, "T√™n file kh√¥ng h·ª£p l·ªá.");
                        return;
                    }

                    String extension = originalFileName.substring(originalFileName.lastIndexOf("."));
                    String newFileName = "logo_" + System.nanoTime() + extension; // D√πng nanoTime ƒë·ªÉ tr√°nh tr√πng

                    // L∆∞u file v√†o th∆∞ m·ª•c Uploads
                    String uploadsPath = getServletContext().getRealPath("/uploads");
                    File uploadsDir = new File(uploadsPath);
                    if (!uploadsDir.exists() && !uploadsDir.mkdirs()) {
                        LOGGER.severe("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c Uploads: " + uploadsPath);
                        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c l∆∞u file.");
                        return;
                    }

                    File savedFile = new File(uploadsDir, newFileName);
                    filePart.write(savedFile.getAbsolutePath());
                    LOGGER.info("üñºÔ∏è File ƒë√£ l∆∞u t·∫°i: " + savedFile.getAbsolutePath());

                    // Sao l∆∞u v√†o images
                    String imagesPath = getServletContext().getRealPath("/images");
                    File imagesDir = new File(imagesPath);
                    if (!imagesDir.exists() && !imagesDir.mkdirs()) {
                        LOGGER.severe("‚ùå Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c images: " + imagesPath);
                        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c sao l∆∞u.");
                        return;
                    }

                    File backupFile = new File(imagesDir, newFileName);
                    Files.copy(savedFile.toPath(), backupFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                    LOGGER.info("üóÇÔ∏è Sao l∆∞u logo v√†o /images th√†nh c√¥ng.");

                    // C·∫≠p nh·∫≠t database
                    String sql = "UPDATE CenterInfo SET Logo = ? WHERE CenterID = 1";
                    try (PreparedStatement ps = conn.prepareStatement(sql)) {
                        ps.setString(1, newFileName);
                        int rows = ps.executeUpdate();
                        if (rows == 0) {
                            LOGGER.warning("‚ö†Ô∏è Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c logo trong DB.");
                            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c logo.");
                            return;
                        }
                        LOGGER.info("‚úÖ ƒê√£ c·∫≠p nh·∫≠t logo m·ªõi v√†o DB: " + newFileName);
                    }
                } catch (IllegalStateException e) {
                    LOGGER.log(Level.SEVERE, "‚ùå L·ªói k√≠ch th∆∞·ªõc file: ", e);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "File qu√° l·ªõn ho·∫∑c kh√¥ng h·ª£p l·ªá.");
                    return;
                } catch (ServletException | IOException e) {
                    LOGGER.log(Level.SEVERE, "‚ùå L·ªói khi x·ª≠ l√Ω file upload: ", e);
                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói khi x·ª≠ l√Ω file: " + (e.getMessage() != null ? e.getMessage() : "Kh√¥ng x√°c ƒë·ªãnh"));
                    return;
                }

            } else if (fieldName != null && !fieldName.trim().isEmpty()) {
                // X·ª≠ l√Ω c·∫≠p nh·∫≠t th√¥ng tin vƒÉn b·∫£n
                String fieldValue = request.getParameter("fieldValue");
                if (fieldValue == null || fieldValue.trim().isEmpty()) {
                    LOGGER.warning("‚ö†Ô∏è Gi√° tr·ªã fieldValue kh√¥ng h·ª£p l·ªá.");
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Gi√° tr·ªã kh√¥ng h·ª£p l·ªá.");
                    return;
                }

                // Ki·ªÉm tra field h·ª£p l·ªá
                boolean isValidField = false;
                for (String valid : VALID_FIELDS) {
                    if (valid.equals(fieldName)) {
                        isValidField = true;
                        break;
                    }
                }

                if (!isValidField) {
                    LOGGER.warning("‚ö†Ô∏è T√™n tr∆∞·ªùng kh√¥ng h·ª£p l·ªá: " + fieldName);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "T√™n tr∆∞·ªùng kh√¥ng h·ª£p l·ªá.");
                    return;
                }

                String dbColumn = switch (fieldName) {
                    case "centerName" -> "NameCenter";
                    case "address" -> "AddressCenter";
                    case "email" -> "Email";
                    case "phone" -> "Phone";
                    default -> null;
                };

                if (dbColumn == null) {
                    LOGGER.warning("‚ö†Ô∏è Tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: " + fieldName);
                    response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Tr∆∞·ªùng kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.");
                    return;
                }

                String sql = "UPDATE CenterInfo SET " + dbColumn + " = ? WHERE CenterID = 1";
                try (PreparedStatement ps = conn.prepareStatement(sql)) {
                    ps.setString(1, fieldValue);
                    int rows = ps.executeUpdate();
                    if (rows == 0) {
                        LOGGER.warning("‚ö†Ô∏è Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c " + dbColumn + ": " + fieldValue);
                        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Kh√¥ng c·∫≠p nh·∫≠t ƒë∆∞·ª£c th√¥ng tin.");
                        return;
                    }
                    LOGGER.info("‚úÖ ƒê√£ c·∫≠p nh·∫≠t " + dbColumn + ": " + fieldValue);
                }

            } else {
                LOGGER.warning("‚ö†Ô∏è Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá: Thi·∫øu fieldName ho·∫∑c kh√¥ng ph·∫£i multipart.");
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá.");
                return;
            }

            // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß
            response.sendRedirect(request.getContextPath() + "/home");

        } catch (SQLException e) {
            LOGGER.log(Level.SEVERE, "‚ùå L·ªói khi c·∫≠p nh·∫≠t c∆° s·ªü d·ªØ li·ªáu: ", e);
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói c∆° s·ªü d·ªØ li·ªáu: " + (e.getMessage() != null ? e.getMessage() : "Kh√¥ng x√°c ƒë·ªãnh"));
        }
    }
}